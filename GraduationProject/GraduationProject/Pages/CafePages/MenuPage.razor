@*@page "/menu"

@using CafeBlazor.DataBase
@using CafeBlazor.Services
@inject CafeContext Context
@inject CurrentElementService CurrentElement
@inject NavigationManager Navigation
@inject FileSystemService FileSystemService
@inject ISnackbar Snackbar

<PageTitle>МЕНЮ</PageTitle>

<style>
    .mainblock {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }

    .titleText {
        font-size: 25px;
        font-weight: 500;
        color: #784421;
        margin-left: 7px;
        text-align: center;
        vertical-align: middle;
    }

    .labelText {
        font-size: 23px;
        font-weight: 500;
        color: #784421;
        margin-top: 10px;
        margin-left: 7px;
    }

    .avatar {
        background-color: #d38d5f;
    }

    .camera {
        background-color: #784421;
        left: 130px;
        bottom: 50px;
    }

    .fieldsBlock {
        flex: 50%;
        margin-left: 50px;
        height: 400px;
        width: 300px;
        overflow-y: scroll;
    }
</style>

<div style="position: absolute; left: 190px; width: 1000px;display: flex; flex-direction: row; justify-content: flex-start;">
    <MudSelect T="string" Label="Категория блюда" Variant="Variant.Outlined" ValueChanged="GetCategoryFilt" Value="CurrentElement.CurrentMealCategory" Style="font-size: 16px; border: 3px solid #784421; color: #784421; border-radius: 10px; ">
        @foreach (var category in categories)
        {
            <MudSelectItem Value="@(category.Title)" />
        }
    </MudSelect>
    @if (CurrentElement.CurrentRole == "Администратор")
    {
        <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #784421; color: #784421; left:7px; " OnClick="OpenAddDialog">Добавить блюдо</MudButton>
    }
</div>

<div style="position:absolute">
    <MudGrid Spacing="@spacing" Justify="Justify.FlexStart"
             Style="position: absolute;
        left: 80px;
        margin-right: auto;
        top: 100px;
        width: 1200px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        border-radius: 30px;
        background-color: #fedcb7;
    }">
        @foreach (var meal in meals)
        {
            <MudItem>
                <MudPaper Height="330px" Width="260px" Class="d-flex align-center justify-center mud-width-full py-8" Style="background-color: #fedcb7; box-shadow: none; border-radius: 20px;">
                    <a @onclick="() => GetMeal(meal)">
                        <MudPaper Height="330px" Width="260px" Style="border: 3px solid #784421; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; border-radius: 20px;">
                            @if (meal.Image != null)
                            {
                                <img src="@GetImage(meal)" style="height:200px; width:100%; background-color: #fedcb7; border-radius: 17px 17px 0 0;" />
                            }
                            else
                            {
                                <img src="/images/logo.png" style="height:200px; width:100%; background-color: #fedcb7; border-radius: 17px 17px 0 0;" />
                            }

                            <MudText Class="titleText">@meal.Title</MudText>
                            <MudText Class="titleText">@meal.Cost руб.</MudText>
                        </MudPaper>
                    </a>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</div>

<MudDialog @bind-IsVisible="visible" Options="options" Style="height: 600px;">
    <TitleContent>
        <MudText Style="font-size: 30px">
            Добавление блюда
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="mainblock">
            <div class="imgBlock">
                @if (!string.IsNullOrEmpty(mealImage))
                {
                    <MudAvatar Style="height:300px; width:300px; font-size:2rem; background-color: #fedcb7" Image="@imagePath"></MudAvatar>
                }
                else
                {
                    <MudAvatar Style="height:300px; width:300px; font-size:2rem;" Class="avatar"></MudAvatar>
                }

                <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles">
                    <ButtonTemplate>
                        <MudIconButton HtmlTag="label"
                                       Icon="@Icons.Material.Filled.PhotoCamera"
                                       for="@context" Class="camera">
                        </MudIconButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </div>

            <div class="fieldsBlock">
                <div class="box-content-row">
                    <div class="box-horizontal">
                        <MudText style="font-size: 20px;">Название: <span class="required"> *</span></MudText>
                    </div>
                    <MudTextField @bind-Value="mealTitle" Variant="Variant.Outlined" />
                </div>

                <div class="box-content-row">
                    <div class="box-horizontal">
                        <MudText style="font-size: 20px;">Цена: <span class="required"> *</span></MudText>
                    </div>
                    <MudTextField @bind-Value="mealCost" Variant="Variant.Outlined" HelperText="необходимо ввести только число" />
                </div>

                <div class="box-content-row">
                    <div class="box-horizontal">
                        <MudText style="font-size: 20px;">Вес: </MudText>
                    </div>
                    <MudTextField @bind-Value="mealWeigth" Variant="Variant.Outlined" HelperText="необходимо ввести только число" />
                </div>

                <div class="box-content-row">
                    <div class="box-horizontal">
                        <MudText style="font-size: 20px;">Описание: </MudText>
                    </div>
                    <MudTextField @bind-Value="mealDescription" Variant="Variant.Outlined" />
                </div>

                <div class="box-content-row">
                    <div class="box-horizontal">
                        <MudText style="font-size: 20px;">Категория блюда: <span class="required"> *</span></MudText>
                    </div>
                    <MudSelect Dense="true" T="string" Variant="Variant.Outlined" @bind-Value="mealCategory">
                        @foreach (var category in categories)
                        {
                            <MudSelectItem T="string" Value="@(category.Title)" />
                        }
                    </MudSelect>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 50px; font-size: 15px; border: 3px solid #784421; color: #784421; margin-right: 7px;" OnClick="Add">Добавить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private int spacing { get; set; } = 5;

    private List<Meal> meals = new List<Meal>();
    private List<Category> categories = new List<Category>();

    private string mealImage = "";
    private string imagePath = "";
    private string mealTitle = "";
    private string mealCost = "";
    private string mealWeigth = "";
    private string mealDescription = "";
    private string mealCategory = "";

    private DialogOptions options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    private bool visible;

    protected override void OnInitialized()
    {
        categories = Context.Categories.ToList();
        if (CurrentElement.CurrentMealCategory == null)
        {
            CurrentElement.CurrentMealCategory = categories[0].Title;
        }
        GetCategoryFilt(CurrentElement.CurrentMealCategory);
    }

    private string GetImage(Meal meal) => $"/images/meals/{meal.Image}";

    private void GetMeal(Meal meal) => Navigation.NavigateTo($"/meal_page/{meal.Id}");

    private void OpenAddDialog()
    {
        GetNull();
        visible = true;
    }

    private void GetCategoryFilt(string selected)
    {
        CurrentElement.CurrentMealCategory = selected;
        var categoryId = Context.Categories.FirstOrDefault(x => x.Title == CurrentElement.CurrentMealCategory).Id;
        meals = Context.Meals.Where(x => x.CategoryId == categoryId && x.IsDeleted == false).ToList();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            Stream stream = file.OpenReadStream(5000000000);
            await FileSystemService.UploadFileAsync(file.Name, stream, "meal");
            mealImage = file.Name;
            await stream.DisposeAsync();
            imagePath = $"/images/meals/{file.Name}";
        }
    }

    private void Add()
    {
        try
        {
            if (mealTitle == "" || mealCost == "" || mealWeigth == "" || mealDescription == "" || mealCategory == "")
            {
                Snackbar.Add("Для добавления блюда все обязательные поля должны быть заполнены!", Severity.Error, config => { config.ShowCloseIcon = false; });
                return;
            }

            var newMeal = new Meal()
                {
                    Title = mealTitle,
                    Cost = int.Parse(mealCost),
                    Weight = int.Parse(mealWeigth),
                    Description = mealDescription,
                    CategoryId = Context.Categories.FirstOrDefault(x => x.Title == mealCategory).Id,
                    Image = mealImage,
                    IsDeleted = false
                };

            Context.Meals.Add(newMeal);
            Context.SaveChanges();
            Context.ChangeTracker.Clear();

            Snackbar.Add("Блюдо успешно добавлено в меню!", Severity.Success, config => { config.ShowCloseIcon = false; });
            visible = false;
            GetNull();
        }
        catch
        {
            Snackbar.Add("Ошибка данных! Некоторые поля заполнены некорректно!", Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }

    private void GetNull()
    {
        mealTitle = "";
        mealCost = "";
        mealWeigth = "";
        mealDescription = "";
        mealCategory = "";
        mealImage = "";
    }
}
*@