@*@page "/meal_page/{currentMealId}"

@using CafeBlazor.DataBase
@using CafeBlazor.Services
@using CafeBlazor.Components
@inject CurrentElementService CurrentElement
@inject ActionDialogService Action
@inject CafeContext Context
@inject NavigationManager Navigation
@inject FileSystemService FileSystemService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>СТРАНИЦА БЛЮДА</PageTitle>

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        background-color: #fedcb7;
    }

    .mainLabel {
        text-align: center;
        margin-right: 90px;
        margin-bottom: 30px;
        font-size: 50px;
        font-weight: 500;
        color: #784421;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }

    .labelText {
        font-size: 25px;
        font-weight: 500;
        color: #784421;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }

    .fieldsBlock {
        flex: 50%;
        margin-bottom: 30px;
        margin-right: 50px;
        margin-left: 50px;
        height: 400px;
        width: 300px;
        overflow-y: scroll;
    }

    .imgBlock {
        flex: 50%;
        text-align: center;
        margin-left: 50px;
        width: 400px;
        height: 400px;
    }

    .camera {
        background-color: #784421;
        left: 170px;
        bottom: 50px;
    }
</style>

<MudPaper Class="paper">
    <div style="display:flex; flex-direction: row;">
        @if (CurrentElement.CurrentRole == "Клиент")
        {
            <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #784421; color: #784421; left:7px;" OnClick="@Buy">В корзину</MudButton>
        }
        else if (CurrentElement.CurrentRole == "Администратор")
        {
            <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #784421; color: #784421; left:7px; margin-right:5px;" OnClick="@Delete">Удалить</MudButton>
            @if (edit)
            {
                <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #784421; color: #784421; left:7px;" OnClick="@GetEdit">Изменить</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #784421; color: #784421; left:7px;" OnClick="@Edit">Сохранить изменения</MudButton>
            }
        }
    </div>
    <div class="mainBlock">
        <div class="imgBlock">
            <MudAvatar Style="height:400px; width:400px; background-color: #fedcb7; border: 3px solid #784421; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;" Image="@imagePath"></MudAvatar>
            <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles">
                <ButtonTemplate>
                    <MudIconButton HtmlTag="label"
                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                   for="@context" Class="camera" Disabled="@edit">
                    </MudIconButton>
                </ButtonTemplate>
            </MudFileUpload>
        </div>
        <div class="fieldsBlock">
            <div>
                <MudText style="font-size: 20px;">Название: <span style="visibility: @visible"> *</span></MudText>
                <MudTextField @bind-Value="mealTitle" Variant="Variant.Outlined" ReadOnly="@edit" Style="font-size: 20px; border: 3px solid #784421; color: #784421; border-radius: 10px;" />
            </div>

            <div>
                <MudText style="font-size: 20px;">Цена: <span style="visibility: @visible"> *</span></MudText>
                @if (CurrentElement.CurrentRole == "Администратор")
                {
                    <MudTextField @bind-Value="mealCost" Variant="Variant.Outlined" HelperText="необходимо ввести только число" ReadOnly="@edit" Style="font-size: 20px; border: 3px solid #784421; color: #784421; border-radius: 10px;" />
                }
                else if (CurrentElement.CurrentRole == "Клиент")
                {
                    <MudTextField @bind-Value="mealCost" Variant="Variant.Outlined" ReadOnly="@edit" Style="font-size: 20px; border: 3px solid #784421; color: #784421; border-radius: 10px;" />
                }
            </div>

            <div>
                <MudText style="font-size: 20px;">Вес: </MudText>
                @if (CurrentElement.CurrentRole == "Администратор")
                {
                    <MudTextField @bind-Value="mealWeigth" Variant="Variant.Outlined" HelperText="необходимо ввести только число" ReadOnly="@edit" Style="font-size: 20px; border: 3px solid #784421; color: #784421; border-radius: 10px;" />
                }
                else if (CurrentElement.CurrentRole == "Клиент")
                {
                    <MudTextField @bind-Value="mealWeigth" Variant="Variant.Outlined" ReadOnly="@edit" Style="font-size: 20px; border: 3px solid #784421; color: #784421; border-radius: 10px;" />
                }
            </div>

            <div>
                <MudText style="font-size: 20px;">Описание: </MudText>
                <MudTextField @bind-Value="mealDescription" Variant="Variant.Outlined" ReadOnly="@edit" Style="font-size: 20px; border: 3px solid #784421; color: #784421; border-radius: 10px;" />
            </div>

            <div>
                <MudText style="font-size: 20px;">Категория блюда:</MudText>
                <MudTextField @bind-Value="mealCategory" Variant="Variant.Outlined" ReadOnly="@edit" Style="font-size: 20px; border: 3px solid #784421; color: #784421; border-radius: 10px;" />
            </div>
        </div>
    </div>
</MudPaper>

@code {
    [Parameter]
    public string? currentMealId { get; set; }

    private Meal currentMeal = new Meal();

    private string mealImage = "";
    private string imagePath = "";
    private string mealTitle = "";
    private string mealCost = "";
    private string mealWeigth = "";
    private string mealDescription = "";
    private string mealCategory = "";

    private string visible = "hidden";

    private bool edit = true;

    protected override void OnInitialized()
    {
        currentMeal = Context.Meals.FirstOrDefault(x => x.Id == int.Parse(currentMealId));
        GetFields();
    }

    private void GetEdit()
    {
        visible = "visible";
        edit = false;
    }

    private void GetFields()
    {
        mealTitle = currentMeal.Title;
        mealCost = currentMeal.Cost.ToString();
        mealDescription = currentMeal.Description;
        mealWeigth = currentMeal.Weight.ToString();
        mealImage = currentMeal.Image;
        mealCategory = Context.Categories.FirstOrDefault(x => x.Id == currentMeal.CategoryId).Title;
        imagePath = $"/images/meals/{currentMeal.Image}";
    }

    private void GetData()
    {
        currentMeal.Title = mealTitle;
        currentMeal.Cost = int.Parse(mealCost);
        currentMeal.Description = mealDescription;
        currentMeal.Weight = int.Parse(mealWeigth);
        currentMeal.Image = mealImage;
        currentMeal.CategoryId = Context.Categories.FirstOrDefault(x => x.Title == mealCategory).Id;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            Stream stream = file.OpenReadStream(5000000000);
            await FileSystemService.UploadFileAsync(file.Name, stream, "meal");
            mealImage = file.Name;
            await stream.DisposeAsync();
            imagePath = $"/images/meals/{file.Name}";
        }
    }

    private async Task Delete()
    {
        Action.CurrentAction = false;
        var result = await DialogService.Show<ActionDialog>($"Вы уверены, что хотите удалить это блюдо из меню?").Result;

        if (!result.Canceled)
        {
            currentMeal.IsDeleted = true;
            Context.Meals.Update(currentMeal);
            Context.SaveChanges();
            Snackbar.Add("Блюдо успешно удалено!", Severity.Success, config => { config.ShowCloseIcon = false; });
            Navigation.NavigateTo("/menu");
        }
    }

    private void Edit()
    {
        try
        {
            if (mealTitle == "")
            {
                Snackbar.Add("Для изменения данных блюда все обязательные поля должны быть заполнены!", Severity.Error, config => { config.ShowCloseIcon = false; });
                return;
            }

            GetData();
            Context.Meals.Update(currentMeal);
            Context.SaveChanges();
            Context.ChangeTracker.Clear();
            Snackbar.Add("Данные блюда успешно изменены!", Severity.Success, config => { config.ShowCloseIcon = false; });
            visible = "hidden";
            edit = true;
        }
        catch
        {
            Snackbar.Add("Ошибка данных! Некоторые поля заполнены некорректно!", Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }

    private void Buy()
    {
        try
        {
            var newBasket = new Basket()
                {
                    Count = 1,
                    MealId = currentMeal.Id,
                    UserId = CurrentElement.CurrentUser.Id
                };

            Context.Baskets.Add(newBasket);
            Context.SaveChanges();
            Context.ChangeTracker.Clear();
            Snackbar.Add("Товар добавлен в корзину", Severity.Success, config => { config.ShowCloseIcon = false; });
            Navigation.NavigateTo($"/menu");
        }
        catch
        {
            Snackbar.Add("Ошибка данных!", Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
}

*@