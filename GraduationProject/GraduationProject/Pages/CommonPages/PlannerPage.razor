@page "/planner"

@using GraduationProject.DataBase
@using GraduationProject.Services
@using GraduationProject.RazorComponents
@inject GraduationProjectContext Context
@inject CurrentElementService CurrentElement
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        background-color: #EEFFF7;
    }

    .img {
        width: 400px;
        height: 400px;
    }

    .mainLabel {
        text-align: center;
        margin-right: 90px;
        margin-bottom: 30px;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }

    .mainLabelText {
        text-align: center;
        margin-left: auto;
        margin-right: auto;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        font-family: Andale Mono, monospace;
    }

    .labelText {
        font-size: 30px;
        font-weight: 500;
        color: #21A77F;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }
</style>

<MudPaper Class="paper">
    <MudText Class="mainLabelText">Планировщик задач</MudText>
    @if (CurrentElement.CurrentRole == "Администратор")
    {
        <div style="margin-left: auto; margin-right: auto; text-align: center;">
            <MudButton Style="font-size: 16px;  border: 3px solid #21A77F; color: #21A77F; border-radius: 10px; " Variant="Variant.Outlined" OnClick="OpenAddDialog">Добавить задачу</MudButton>
            <MudSelect T="string" Label="Должность" Variant="Variant.Outlined" ValueChanged="GetRole" Value="currentRole" Style="font-size: 16px; border: 3px solid #21A77F; color: #21A77F; border-radius: 10px; ">
                @foreach (var role in rolesFilt)
                {
                    <MudSelectItem Value="@(role.Title)" />
                }
            </MudSelect>
        </div>
    }
    <hr />
    <div class="tableBlock" style="overflow: scroll; height: 379px;  margin-left: auto; margin-right: auto;">
        <MudTable Items="@Elements.Take(10)" Dense="true" @bind-SelectedItems="selectedItems" @bind-SelectedItem="selectedItem" @bind-SelectOnRowClick="@_selectOnRowClick" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
                  CustomHeader="true" CustomFooter="true" >
            <HeaderContent>
                <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
                </MudTHeadRow>
                <MudTHeadRow IsCheckable="true">
                    @if (CurrentElement.CurrentRole != "Администратор")
                    {
                        <MudTh></MudTh>
                    }
                    <MudTh>Название</MudTh>
                    <MudTh>Дата</MudTh>
                    <MudTh>Описание</MudTh>
                    @if (CurrentElement.CurrentRole == "Администратор")
                    {
                        <MudTh>Изменение</MudTh>
                        <MudTh>Удаление</MudTh>                        
                        <MudTh>Должность</MudTh>                        
                    }
                    else
                    {
                        <MudTh>Закрепление</MudTh>
                    }
                </MudTHeadRow>
            </HeaderContent>
            <RowTemplate>
                @if (CurrentElement.CurrentRole != "Администратор")
                { 
                    <MudTd DataLabel="IsDone"><MudCheckBox Style="color: #658dc3;" Checked="BoolActive(context.IsDone)" Class="d-flex mx-auto" @onclick="() => ToCheck(context, 1)"></MudCheckBox></MudTd>
                }
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Date">@GetShortDate(context.Date)</MudTd>
                <MudTd DataLabel="Description" Style="text-align: center"><MudTooltip Text="@context.Description"><MudButton Style="font-size: 16px; border: 2px solid #21A77F; color: #21A77F; border-radius: 10px;" Variant="Variant.Outlined">Описание</MudButton></MudTooltip></MudTd>
                @if (CurrentElement.CurrentRole == "Администратор")
                {
                    <MudTd DataLabel="Edit" Style="text-align: center"><MudButton Style="font-size: 16px; border: 2px solid #21A77F; color: #21A77F; border-radius: 10px;" Variant="Variant.Outlined" OnClick="@(() => GetEdit(context))">Изменить</MudButton></MudTd>
                    <MudTd DataLabel="Delete" Style="text-align: center"><MudButton Style="font-size: 16px; border: 2px solid #21A77F; color: #21A77F; border-radius: 10px;" Variant="Variant.Outlined" OnClick="@(() => Delete(context))">Удалить</MudButton></MudTd>
                    <MudTd DataLabel="Title">@GetTaskRole(context)</MudTd>
                }
                else
                {
                    <MudTd DataLabel="IsFixed"><MudCheckBox Style="color: #658dc3;" Checked="BoolActive(context.IsFixed)" Class="d-flex mx-auto" @onclick="() => ToCheck(context, 2)"></MudCheckBox></MudTd>
                }
            </RowTemplate>
            @*<FooterContent>
                <MudTFootRow IsCheckable="true">
                    <MudTd colspan="5">Выполнено: @selectedItems.Count</MudTd>
                </MudTFootRow>
            </FooterContent>*@
        </MudTable>
    </div>

<MudDialog @bind-IsVisible="visible" Options="options" >
    <TitleContent>
        @if (edit)
        {
            <MudText Style="font-size: 30px">Редактирование задачи</MudText>                
        }
        else
        {
            <MudText Style="font-size: 30px">Добавление задачи</MudText>
        }
    </TitleContent>
    <DialogContent>
        <div class="mainblock">
            <div class="fieldsBlock">
                <div>
                    <MudText Class="labelText">Должность</MudText>
                    <MudSelect T="string" Label="Должность" Variant="Variant.Outlined" ValueChanged="DialogGetRole" Value="dialogCurrentRole" Style="font-size: 16px; border: 3px solid #21A77F; color: #21A77F; border-radius: 10px; ">
                        @foreach (var role in rolesFilt)
                        {
                            <MudSelectItem Value="@(role.Title)" />
                        }
                    </MudSelect>
                </div>
                <div>
                    <MudText Class="labelText">Название</MudText>
                    <input @bind-value="taskTitle" />
                </div>
                <div>
                    <MudText Class="labelText">Описание</MudText>
                    <input @bind-value="taskDescription"/>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        @if (edit)
        {
            <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 50px; font-size: 15px; border: 3px solid #21A77F; color: #21A77F; margin-right: 7px;" OnClick="Edit">Изменить</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 50px; font-size: 15px; border: 3px solid #21A77F; color: #21A77F; margin-right: 7px;" OnClick="Add">Добавить</MudButton>
        }
    </DialogActions>
</MudDialog>
    
</MudPaper>

@code {
    private List<PlannerTask> ElementsOne = new List<PlannerTask>();
    private List<PlannerTask> ElementsTwo = new List<PlannerTask>();
    private List<PlannerTask> Elements = new List<PlannerTask>();
    private PlannerTask selectedItem = new PlannerTask();
    private HashSet<PlannerTask> selectedItems = new HashSet<PlannerTask>();
    private bool _selectOnRowClick = true;
    private MudTable<PlannerTask> _table;
    private bool check;
    private bool visible;
    private bool edit = false;
    private string taskTitle = "";
    private string taskDescription = "";
    private DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
    private PlannerTask currentTask = new PlannerTask();
    private List<Role> rolesFilt = new List<Role>();
    private static readonly Role _allRoles = new Role() { Title = "Все" };
    private string currentRole = "Все";
    private string dialogCurrentRole = "";
    private List<User> dialogCurrentUserList = new List<User>();

    protected override void OnInitialized()
    {
        rolesFilt = Context.Roles.Where(x => x.Title != "Администратор").ToList();
        rolesFilt.Add(_allRoles);
        Update();
    }

    public void Update()
    {
        ElementsOne.Clear();
        ElementsTwo.Clear();
        Elements.Clear();
        if (CurrentElement.CurrentRole == "Администратор")
        {
            Elements.AddRange(Context.PlannerTasks.ToList());
            Elements.Reverse();
        }
        else
        {
            var userTask = Context.UserTasks.Where(x => x.UserId == CurrentElement.CurrentUser.Id).ToList();

            foreach (var ut in userTask)
            {
                ElementsOne.AddRange(Context.PlannerTasks.Where(x => x.Id == ut.TaskId && x.IsFixed == true));
            }
            ElementsOne.Reverse();

            foreach (var ut in userTask)
            {
                ElementsTwo.AddRange(Context.PlannerTasks.Where(x => x.Id == ut.TaskId && x.IsFixed != true));
            }
            ElementsTwo.Reverse();
            Elements.AddRange(ElementsOne);
            Elements.AddRange(ElementsTwo);
        }
    }

    private void GetRole(string selected)
    {
        currentRole = selected;

        if (currentRole == "Все")
        {
            Update();
            return;
        }

        Elements.Clear();
        var roleId = Context.Roles.FirstOrDefault(x => x.Title == currentRole).Id;
        var userId = Context.Users.FirstOrDefault(x => x.RoleId == roleId).Id;
        var tasks = Context.UserTasks.Where(x => x.UserId == userId).ToList();

        foreach (var t in tasks)
        {
            Elements.AddRange(Context.PlannerTasks.Where(x => x.Id == t.TaskId).ToList());
        }

        Elements.Reverse();
    }

    private void DialogGetRole(string selected)
    {
        dialogCurrentRole = selected;
        var roleId = Context.Roles.FirstOrDefault(x => x.Title == dialogCurrentRole).Id;
        dialogCurrentUserList = Context.Users.Where(x => x.RoleId == roleId).ToList();
    }

    private string GetTaskRole(PlannerTask plannerTask)
    {
        var userTask = Context.UserTasks.FirstOrDefault(x => x.TaskId == plannerTask.Id);
        var user = Context.Users.FirstOrDefault(x => x.Id == userTask.UserId);
        return Context.Roles.FirstOrDefault(x => x.Id == user.Id).Title;
    }

    String GetShortDate(DateTime? dateTime)
    {
        DateTime convertDate = (DateTime)dateTime;
        return convertDate.ToShortDateString();
    }

    public bool BoolActive(bool? fix)
    {
        return fix ?? false;
    }

    public void ToCheck(PlannerTask plan, int doneOrFix)
    {
        if (doneOrFix == 1)
        {
            check = plan.IsDone ?? false;

            if (!BoolActive(check))
                plan.IsDone = true;
            else
                plan.IsDone = false;
        }
        else
        {
            check = plan.IsFixed ?? false;

            if (!BoolActive(check))
                plan.IsFixed = true;
            else
                plan.IsFixed = false;
        }

        Context.PlannerTasks.Update(plan);
        Context.SaveChanges();
        Context.ChangeTracker.Clear();
        Update();
    }     

    private void GetEdit(PlannerTask plannerTask)
    {
        taskTitle = plannerTask.Title;
        taskDescription = plannerTask.Description;
        visible = true;
        edit = true;
        currentTask = plannerTask;
    }

    private async Task Edit()
    {
        CurrentElement.DeleteOrEdit = false;
        var result = await DialogService.Show<AcceptDialog>($"Вы уверены, что хотите принять внесенные изменения?").Result;

        if (!result.Canceled)
        {
            if (taskTitle == "")
            {
                taskTitle = "Без названия";
            }

            GetData(currentTask);
            Context.PlannerTasks.Update(currentTask);
            Context.SaveChanges();
            Context.ChangeTracker.Clear();
            Snackbar.Add("Задача успешно изменена!", Severity.Success, config => { config.ShowCloseIcon = false; });
            visible = false;
            Update();
        }
    }

    private void GetData(PlannerTask plannerTask)
    {
        plannerTask.Title = taskTitle;
        plannerTask.Description = taskDescription;
    }

    private async Task Delete(PlannerTask plannerTask)
    {
        CurrentElement.DeleteOrEdit = true;
        var result = await DialogService.Show<AcceptDialog>($"Вы уверены, что хотите удалить эту задачу?").Result;

        if (!result.Canceled)
        {
            Context.PlannerTasks.Remove(plannerTask);
            Context.SaveChanges();
            Snackbar.Add("Задача успешно удалена!", Severity.Success, config => { config.ShowCloseIcon = false; });
            Update();
        }
    }

    private void OpenAddDialog()
    {
        GetNull();
        visible = true;
    }

    private void GetNull()
    {
        taskTitle = "";
        taskDescription = "";
    }

    private void Add()
    {
        if (dialogCurrentRole == "")
        {
            Snackbar.Add("Для добавления задачи необходимо выбрать должность сотрудника!!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        if (taskTitle == "")
        {
            taskTitle = "Без названия";
        }

        var newTask = new PlannerTask()
            {
                Title = taskTitle,
                Description = taskDescription,
                Date = DateTime.Today,
                IsFixed = false,
                IsDone = false
            };

        Context.PlannerTasks.Add(newTask);
        Context.SaveChanges();

        foreach(var d in dialogCurrentUserList)
        {
            var newUserTask = new UserTask()
                {
                    UserId = d.Id,
                    Task = newTask
                };
            Context.UserTasks.Add(newUserTask);
        }
        
        Context.SaveChanges();
        Context.ChangeTracker.Clear();

        Snackbar.Add("Задача успешно добавлена!", Severity.Success, config => { config.ShowCloseIcon = false; });
        visible = false;
        GetNull();
        Update();
    }
}
