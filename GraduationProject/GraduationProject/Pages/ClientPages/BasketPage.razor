@*@page "/basket"

@using CafeBlazor.DataBase
@using System.Globalization
@using CafeBlazor.Services
@using CafeBlazor.Components
@inject CurrentElementService CurrentElement
@inject ActionDialogService Action
@inject CafeContext Context
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>КОРЗИНА</PageTitle>

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        background-color: #fedcb7;
        border-radius: 30px;
    }

    .mainLabelText {
        text-align: center;
        margin-left: auto;
        margin-right: auto;
        font-size: 50px;
        font-weight: 500;
        color: #784421;
        font-family: Andale Mono, monospace;
    }

    .labelText {
        font-size: 25px;
        font-weight: 500;
        color: #784421;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }

    .mainLabel {
        text-align: center;
        margin-left: 50px;
        margin-top: 30px;
        font-size: 50px;
        font-weight: 500;
        color: #784421;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }
</style>

<MudPaper Class="paper">
    <MudText Class="mainLabelText">Корзина</MudText>
    <div class="mainBlock">
        <div class="tableBlock" style="overflow: scroll; height: 379px; width: 700px; margin-left: auto; margin-right: auto;">
            @if (mealList.Count == 0)
            {
                <MudText Style="margin-left: auto; margin-right: auto; font-size: 30px; text-align: center; margin-top: 150px;">Корзина пуста</MudText>
            }
            else
            {

                <MudTable Items="@mealList" T="Meal" Hover="true" @bind-SelectedItem="selectedItem" OnRowClick="@GetMeal" Style="border: solid 1px #925831; border-radius: 5px;">
                    <RowTemplate>
                        <MudTd DataLabel="Title" Style="font-size: 20px; width:120px; border: solid 1px #925831; border-radius: 5px;">
                            <img src="@GetImage(context)" style="height:120px; width:120px; background-color: #fedcb7; border-radius: 17px" />
                        </MudTd>
                        <MudTd DataLabel="Title" Style="font-size: 20px;border: solid 1px #925831; border-radius: 5px;">
                            <table>
                                <tr>
                                    <td>@context.Title</td>
                                </tr>
                                <tr>
                                    <td>@GetCost(context)</td>
                                </tr>
                            </table>
                        </MudTd>
                        <MudTd DataLabel="Title" Style="font-size: 20px;border: solid 1px #925831; border-radius: 5px; width: 50px;">
                            <MudTr>
                                <MudTd Style="padding: 0px;">
                                    <MudButton Variant="Variant.Outlined" Style="border-radius: 5px; height: 60px; border: 1px solid #784421; color: #784421; margin:0px;" OnClick="@(() => ClickMinus(context))">-</MudButton>
                                </MudTd>
                                <MudTd>@GetCount(context)</MudTd>
                                <MudTd Style="padding: 0px;">
                                    <MudButton Variant="Variant.Outlined" Style="border-radius: 5px; height: 60px; border: 1px solid #784421; color: #784421;" OnClick="@(() => ClickPlus(context))">+</MudButton>
                                </MudTd>
                            </MudTr>
                            <MudTr style="height: 20px;"></MudTr>
                            <MudTr>
                                <MudTd colspan="3" Style="text-align: center; padding: 0px;">
                                    <MudButton Variant="Variant.Outlined" Style="border-radius: 5px; border: 1px solid #784421; color: #784421;" OnClick="@(() => Delete(context))">Удалить</MudButton>
                                </MudTd>
                            </MudTr>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </div>
    </div>
    <div style="text-align: center;">
        <MudText Style="font-size: 16px; margin-bottom: 0px">@amount</MudText>
        <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 20px; height: 50px; font-size: 16px; border: 3px solid #784421; color: #784421; margin-right: auto; margin-left: auto; margin-top: 0px;" OnClick="@GetOrder">Оформить заказ</MudButton>
    </div>
</MudPaper>

@code {
    private List<Basket> basketList = new List<Basket>();
    private List<Meal> mealList = new List<Meal>();

    private Basket basket = new Basket();

    private Meal selectedItem = new Meal();

    private int price;
    private int number = 0;

    private string count;
    private string amount;

    protected override void OnInitialized()
    {
        GetOrderList();
    }

    private void GetMeal() => Navigation.NavigateTo($"/meal_page/{selectedItem.Id}");

    private string GetImage(Meal meal) => $"/images/meals/{meal.Image}";

    private void GetOrderList()
    {
        mealList.Clear();
        basketList = Context.Baskets.Where(x => x.UserId == CurrentElement.CurrentUser.Id).ToList();
        price = 0;

        foreach (Basket item in basketList)
        {
            mealList.Add(Context.Meals.FirstOrDefault(x => x.Id == item.MealId));
            price += item.Count * mealList[number].Cost;
            number++;
        }

        GetAmount();
    }

    private async Task ClickMinus(Meal meal)
    {
        basket = Context.Baskets.FirstOrDefault(x => x.UserId == CurrentElement.CurrentUser.Id && x.MealId == meal.Id);

        if (basket.Count == 1)
        {
            Action.CurrentAction = false;
            var result = await DialogService.Show<ActionDialog>($"Вы уверены, что хотите удалить это блюдо из корзины?").Result;

            if (!result.Canceled)
            {
                Context.Baskets.Remove(basket);
            }
        }
        else
        {
            basket.Count--;
            Context.Baskets.Update(basket);
            GetCount(meal);
        }

        Context.SaveChanges();
        Context.ChangeTracker.Clear();
        GetOrderList();
    }

    private void ClickPlus(Meal meal)
    {
        basket = Context.Baskets.FirstOrDefault(x => x.UserId == CurrentElement.CurrentUser.Id && x.MealId == meal.Id);
        basket.Count++;
        Context.Baskets.Update(basket);
        Context.SaveChanges();
        Context.ChangeTracker.Clear();
        GetCount(meal);
        GetOrderList();
    }

    private async Task Delete(Meal meal)
    {
        try
        {
            basket = Context.Baskets.FirstOrDefault(x => x.UserId == CurrentElement.CurrentUser.Id && x.MealId == meal.Id);
            Action.CurrentAction = false;
            var result = await DialogService.Show<ActionDialog>($"Вы уверены, что хотите удалить это блюдо из корзины?").Result;

            if (!result.Canceled)
            {
                Context.Baskets.Remove(basket);
                Context.SaveChanges();
                Context.ChangeTracker.Clear();
            }

            GetOrderList();
        }
        catch
        {
            Snackbar.Add("Ошибка данных!", Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }

    private string GetCount(Meal meal)
    {
        basket = Context.Baskets.FirstOrDefault(x => x.UserId == CurrentElement.CurrentUser.Id && x.MealId == meal.Id);
        count = basket.Count.ToString();
        return count;
    }

    private string GetCost(Meal meal)
    {
        basket = Context.Baskets.FirstOrDefault(x => x.UserId == CurrentElement.CurrentUser.Id && x.MealId == meal.Id);
        return $"{meal.Cost * basket.Count} руб.";
    }

    private void GetAmount()
    {
        number = 0;
        amount = $"{price} руб.";
    }

    private void GetOrder()
    {
        try
        {
            if (price != 0)
            {
                var userBasket = Context.Baskets.Where(x => x.UserId == CurrentElement.CurrentUser.Id).ToList();

                var newOrder = new Order()
                    {
                        ReadyTime = DateTime.Now,
                        PurchaseAmount = price,
                        UserId = CurrentElement.CurrentUser.Id,
                        StatusId = 1
                    };

                Context.Orders.Add(newOrder);

                foreach (var item in userBasket)
                {
                    var newMealOrder = new MealOrder()
                        {
                            Count = item.Count,
                            MealId = item.MealId,
                            Order = newOrder
                        };

                    Context.MealOrders.Add(newMealOrder);
                    Context.Baskets.Remove(item);
                }

                Context.SaveChanges();
                Context.ChangeTracker.Clear();
                Snackbar.Add("Заказ успешно оформлен!", Severity.Success, config => { config.ShowCloseIcon = false; });
                Navigation.NavigateTo($"/order_page/{newOrder.Id}");
                mealList.Clear();
            }
            else
            {
                Snackbar.Add("Для оформления заказа необходимо добавить хотя бы одно блюдо в корзину!", Severity.Error, config => { config.ShowCloseIcon = false; });
            }
        }
        catch
        {
            Snackbar.Add("Ошибка данных!", Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
}*@