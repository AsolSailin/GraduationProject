@page "/animal_page/{currentAnimalId}"
@using GraduationProject.DataBase
@using GraduationProject.Services
@using GraduationProject.RazorComponents;
@inject GraduationProjectContext Context
@inject CurrentElementService CurrentElement
@inject NavigationManager Navigation
@inject FileSystemService FileSystemService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>ПАСПОРТ ЖИВОТНОГО</PageTitle>

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        background-color: #EEFFF7;
    }

    .mainLabel {
        text-align: center;
        margin-right: 90px;
        margin-bottom: 30px;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }

    .labelText {
        font-size: 25px;
        font-weight: 500;
        color: #21A77F;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }

    .fieldsBlock {
        flex: 50%;
        margin-bottom: 30px;
        margin-right: 50px;
        margin-left: 50px;
        height: 400px;
        width: 300px;
        overflow-y: scroll;
    }

    .imgBlock {
        flex: 50%;
        text-align: center;
        margin-left: 50px;
        width: 400px;
        height: 400px;
    }

    .camera {
        background-color: #21A77F;
        left: 170px;
        bottom: 50px;
    }
</style>

<MudPaper Class="paper">
    <div style="display:flex; flex-direction: row;">
        <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #21A77F; color: #21A77F; left:7px;" OnClick="@Delete">Удалить</MudButton>
        @if (edit)
        {
            <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #21A77F; color: #21A77F; left:7px;" OnClick="@GetEdit">Изменить</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #21A77F; color: #21A77F; left:7px;" OnClick="@Edit">Сохранить изменения</MudButton>
        }
    </div>
    <div class="mainBlock">
        <div class="imgBlock">
            <MudAvatar Style="height:400px; width:400px; background-color: #EEFFF7; border: 3px solid #21A77F; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;" Image="@imagePath"></MudAvatar>
            <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles">
                <ButtonTemplate>
                    <MudIconButton HtmlTag="label"
                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                   for="@context" Class="camera" Disabled="@edit">
                    </MudIconButton>
                </ButtonTemplate>
            </MudFileUpload>
        </div>
        <div class="fieldsBlock">
            <div>
                <MudText Class="labelText">Общие данные</MudText>
            </div>
            <div>
                <MudText Class="labelText">Пол<span style="visibility: @visible"> *</span></MudText>
                @if (edit)
                {
                    <input @bind-value="gender" readonly="@edit" />
                }
                else
                {
                    <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="gender" Style="font-size: 20px; border: 3px solid #5FCEAD; color: #5FCEAD; border-radius: 10px; ">
                        @foreach (var g in genders)
                        {
                            <MudSelectItem Value="@(g.Title)" />
                        }
                    </MudSelect>
                }
            </div>
            <div>
                <MudText Class="labelText">Вольер</MudText>
                <input @bind-value="animalAviary" readonly="true" />
            </div>
            <div>
                <MudText Class="labelText">Вид</MudText>
                <input @bind-value="kind" readonly="true" />
            </div>
            <div>
                <MudText Class="labelText">Имя<span style="visibility: @visible"> *</span></MudText>
                <input @bind-value="name" readonly="@edit" />
            </div>
            <div>
                <MudText Class="labelText">Дата рождения<span style="visibility: @visible"> *</span></MudText>
                @if (edit)
                {
                    <input @bind-value="date" readonly="@edit" />
                }
                else
                {
                    <MudDatePicker @bind-Date="animalBirthDate" DisableToolbar="true" Style="width: 395px; margin-left: 10px;margin-bottom: 50px;" />
                }
            </div>
            <br />
            <div>
                <MudText Class="labelText">Медицинская карта</MudText>
            </div>
            <div>
                <MudText Class="labelText">Заболевания</MudText>
                    <MudTable Items="@DiseaseElements.Take(5)" Dense="true" @bind-SelectedItems="selectedDiseases" @bind-SelectedItem="selectedDisease" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
                          CustomHeader="true" CustomFooter="true">
                        <HeaderContent>
                            <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
                            </MudTHeadRow>
                            <MudTHeadRow IsCheckable="true">
                                <MudTh></MudTh>
                                <MudTh></MudTh>
                            </MudTHeadRow>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                        <MudTd DataLabel="IsCheck"><MudCheckBox Style="color: #658dc3;" Checked="DiseaseBoolActive(context)" Class="d-flex mx-auto" @onclick="() => DiseaseToCheck(context)" Disabled="@medEdit"></MudCheckBox></MudTd>
                        </RowTemplate>
                    </MudTable>
            </div>
            <div>
                <MudText Class="labelText">Вакцинации</MudText>
                <MudTable Items="@VaccinationElements.Take(5)" Dense="true" @bind-SelectedItems="selectedVaccinations" @bind-SelectedItem="selectedVaccination" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
                          CustomHeader="true" CustomFooter="true">
                    <HeaderContent>
                        <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
                        </MudTHeadRow>
                        <MudTHeadRow IsCheckable="true">
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </MudTHeadRow>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title">@context.Title</MudTd>
                        <MudTd DataLabel="IsCheck"><MudCheckBox Style="color: #658dc3;" Checked="VaccinationBoolActive(context)" Class="d-flex mx-auto" @onclick="() => VaccinationToCheck(context)" Disabled="@medEdit"></MudCheckBox></MudTd>
                    </RowTemplate>
                </MudTable>
            </div>
        </div>
    </div>
</MudPaper>

@code {
    [Parameter]
    public string? currentAnimalId { get; set; }

    private List<Aviary> aviaries = new List<Aviary>();
    private List<AnimalGender> genders = new List<AnimalGender>();
    private List<Disease> diseases = new List<Disease>();
    private List<AnimalDisease> diseaseList = new List<AnimalDisease>();
    private List<Vaccination> vaccinations = new List<Vaccination>();
    private List<AnimalVaccination> vaccinationList = new List<AnimalVaccination>();

    private Aviary aviary = new Aviary();
    private Animal currentAnimal = new Animal();
    private AnimalDisease currentDisease = new AnimalDisease();
    private AnimalVaccination currentVaccination = new AnimalVaccination();

    private DateTime? animalBirthDate = new DateTime();

    private string name = "";
    private string animalAviary = "";
    private string kind = "";
    private string date = "";
    private string imagePath = "";
    private string animalImage = "";
    private string gender = "";
    private string animalNutrition = "";
    private string animalDisease = "";
    private string animalVaccination = "";

    private string visible = "hidden";

    private bool edit = true;
    private bool medEdit = true;
    private bool count = true;

    private List<Disease> DiseaseElements = new List<Disease>();
    private List<Vaccination> VaccinationElements = new List<Vaccination>();
    private Disease selectedDisease = new Disease();
    private Vaccination selectedVaccination = new Vaccination();
    private HashSet<Disease> selectedDiseases = new HashSet<Disease>();
    private HashSet<Vaccination> selectedVaccinations = new HashSet<Vaccination>();

    protected override void OnInitialized()
    {
        currentAnimal = Context.Animals.FirstOrDefault(x => x.Id == int.Parse(currentAnimalId));
        aviary = Context.Aviaries.FirstOrDefault(x => x.Id == currentAnimal.AviaryId);

        aviaries = Context.Aviaries.ToList();
        genders = Context.AnimalGenders.ToList();
        diseases = Context.Diseases.ToList();
        vaccinations = Context.Vaccinations.ToList();

        DiseaseElements = Context.Diseases.ToList();
        VaccinationElements = Context.Vaccinations.ToList();

        GetFields();
        GetDate();
    }

    private void GetEdit()
    {
        visible = "visible";
        edit = false;

        if (CurrentElement.CurrentRole == "Ветеринар")
        {
            medEdit = false;
        }
        else
        {
            medEdit = true;
        }
    }

    private bool DiseaseBoolActive(Disease crntDisease)
    {
        return Context.AnimalDiseases.FirstOrDefault(x => x.DiseaseId == crntDisease.Id && x.AnimalId == currentAnimal.Id) != null;
    }

    public void DiseaseToCheck(Disease crntDisease)
    {
        if (!DiseaseBoolActive(crntDisease))
        {
            var newAnimalDisease = new AnimalDisease()
                {
                    AnimalId = currentAnimal.Id,
                    DiseaseId = crntDisease.Id
                };
            Context.AnimalDiseases.Add(newAnimalDisease);
        }
        else
        {
            Context.AnimalDiseases.Remove(Context.AnimalDiseases.FirstOrDefault(x => x.DiseaseId == crntDisease.Id && x.AnimalId == currentAnimal.Id));
        }
        Context.SaveChanges();
        Context.ChangeTracker.Clear();
    }

    private bool VaccinationBoolActive(Vaccination crntVaccination)
    {
        return Context.AnimalVaccinations.FirstOrDefault(x => x.VaccinationId == crntVaccination.Id && x.AnimalId == currentAnimal.Id) != null;
    }

    public void VaccinationToCheck(Vaccination crntVaccination)
    {
        if (!VaccinationBoolActive(crntVaccination))
        {
            var newAnimalVaccination = new AnimalVaccination()
                {
                    AnimalId = currentAnimal.Id,
                    VaccinationId = crntVaccination.Id
                };
            Context.AnimalVaccinations.Add(newAnimalVaccination);
        }
        else
        {
            Context.AnimalVaccinations.Remove(Context.AnimalVaccinations.FirstOrDefault(x => x.VaccinationId == crntVaccination.Id && x.AnimalId == currentAnimal.Id));
        }
        Context.SaveChanges();
        Context.ChangeTracker.Clear();
    }

    private void GetFields()
    {
        animalAviary = Context.Aviaries.FirstOrDefault(x => x.Id == currentAnimal.AviaryId).Title;
        gender = Context.AnimalGenders.FirstOrDefault(x => x.Id == currentAnimal.GenderId).Title;
        kind = Context.AnimalKinds.FirstOrDefault(x => x.Id == aviary.KindId).Title;
        name = currentAnimal.Name;
        animalBirthDate = currentAnimal.BirthDate;
        animalImage = currentAnimal.Image;
        imagePath = $"/images/Animals/{currentAnimal.Image}";

        diseaseList = Context.AnimalDiseases.Where(x => x.AnimalId == currentAnimal.Id).ToList();
        foreach(var d in diseaseList)
        {
            if (count)
            {
                animalDisease += (Context.Diseases.FirstOrDefault(x => x.Id == d.DiseaseId)).Title;
                count = false;
            }
            else
            {
                animalDisease += ", " + (Context.Diseases.FirstOrDefault(x => x.Id == d.DiseaseId)).Title;
            }
        }

        vaccinationList = Context.AnimalVaccinations.Where(x => x.AnimalId == currentAnimal.Id).ToList();
        count = true;
        foreach (var v in vaccinationList)
        {
            if(count)
            {
                animalVaccination += (Context.Vaccinations.FirstOrDefault(x => x.Id == v.VaccinationId)).Title;
                count = false;
            }
            else
            {
                animalVaccination += ", " + (Context.Vaccinations.FirstOrDefault(x => x.Id == v.VaccinationId)).Title;
            }
        }
    }

    private void GetData()
    {
        currentAnimal.AviaryId = Context.Aviaries.FirstOrDefault(x => x.Title == animalAviary).Id;
        currentAnimal.GenderId = Context.AnimalGenders.FirstOrDefault(x => x.Title == gender).Id;
        currentAnimal.Name = name;
        currentAnimal.BirthDate = (DateTime)animalBirthDate;
        currentAnimal.Image = animalImage;
    }

    private void GetDate()
    {
        var age = DateTime.Today.Year - currentAnimal.BirthDate.Year;
        var year = "";

        if (currentAnimal.BirthDate.Date > DateTime.Today.AddYears(-age)) age--;

        if (age < 1) year = "меньше года";
        else if (age == 1) year = "год";
        else if (age >= 2 && age <= 4) year = "года";
        else year = "лет";

        if (age < 1) date = $"{currentAnimal.BirthDate.ToString("d")} ({year})";
        else date = $"{currentAnimal.BirthDate.ToString("d")} ({age.ToString()} {year})";
    }

    private void GetKind(string selected)
    {
        animalAviary = selected;
        var aviary = Context.Aviaries.FirstOrDefault(x => x.Title == animalAviary);
        var kindId = aviary.KindId;
        kind = Context.AnimalKinds.FirstOrDefault(x => x.Id == kindId).Title;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            Stream stream = file.OpenReadStream(5000000000);
            await FileSystemService.UploadFileAsync(file.Name, stream, "animal");
            animalImage = file.Name;
            await stream.DisposeAsync();
            imagePath = $"/images/Animals/{file.Name}";
        }
    }

    private async Task Delete()
    {
        var result = await DialogService.Show<AcceptDialog>($"Вы уверены, что хотите удалить это животное из зоопарка?").Result;

        if (!result.Canceled)
        {
            currentAnimal.IsDeleted = true;
            Context.Animals.Update(currentAnimal);
            Context.SaveChanges();
            Snackbar.Add("Животное успешно удалено!", Severity.Success, config => { config.ShowCloseIcon = false; });
            Navigation.NavigateTo("/aviary_list");
        }
    }

    private void Edit()
    {
        if (gender == "" ||
        name == "")
        {
            Snackbar.Add("Для изменения данных животного все обязательные поля должны быть заполнены!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        if (animalBirthDate > DateTime.Today)
        {
            Snackbar.Add("Дата заполнена некорректно!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        GetData();
        Context.Animals.Update(currentAnimal);
        Context.SaveChanges();
        Context.ChangeTracker.Clear();
        Snackbar.Add("Данные животного успешно изменены!", Severity.Success, config => { config.ShowCloseIcon = false; });
        GetDate();
        visible = "hidden";
        edit = true;
        medEdit = true;
    }
}

