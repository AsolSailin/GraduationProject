@page "/report_page/{currentReportId}"
@using GraduationProject.DataBase
@using GraduationProject.RazorComponents
@inject IDialogService DialogService
@inject GraduationProjectContext Context
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime iJSRuntime

<PageTitle>СТРАНИЦА ОТЧЕТА</PageTitle>

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;  
        background-color: #EEFFF7;
    }

    .mainLabel {
        text-align: center;
        margin-right: auto;
        margin-left: auto;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        font-family: Andale Mono, monospace;
    }

    .labelText {
        font-size: 25px;
        font-weight: 500;
        color: #21A77F;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }

    .fieldsBlock {
        flex: 50%;
        margin-bottom: 30px;
        margin-right: 30px;
    }

    .listBlock {
        flex: 50%;
        text-align: center;
        margin-left: 50px;
        width: 400px;
        height: 400px;
    }

    .main {
        height: 100%;
        margin-left: auto;
        margin-right: auto;
        overflow-y: scroll;
    }

    p{
        margin-bottom: 0;
    }
</style>

<MudPaper Class="paper">
    <div class="main">
        <div>
            <p Class="mainLabel" style="text-decoration: underline;">Отчет №@currentReportId</p>
            <p Class="mainLabel" style="font-size: 20px; margin-bottom: 30px;">за @currentReport.Date.ToString("d")</p>
            @if (!currentReport.IsAccepted || currentRole.Title == "Администратор")
            {
                <MudButton Variant="Variant.Outlined" Style="bottom: 30px; border-radius: 10px; height: 30px; font-size: 18px; border: 3px solid #21A77F; color: #21A77F;" Class="d-flex mx-auto" OnClick="GetAccept">Принять отчет</MudButton>
            }
        </div>
        <div class="mainBlock">
            <div class="fieldsBlock">
                <div>
                    <MudText Class="labelText">Должность сотрудника</MudText>
                    <input @bind-value="currentRole.Title" readonly="true" />
                </div>
                <div>
                    <MudText Class="labelText">Фамилия</MudText>
                    <input @bind-value="currentUser.Surname" readonly="true" />
                </div>
                <div>
                    <MudText Class="labelText">Имя</MudText>
                    <input @bind-value="currentUser.Name" readonly="true" />
                </div>
                <div>
                    <MudText Class="labelText">Отчество</MudText>
                    <input @bind-value="currentUser.Patronymic" readonly="true" />
                </div>

            </div>
            <div class="tableBlock">
                @switch (currentRole.Title)
                {
                    case "Ветеринар":
                        <MudText Class="labelText">Диаграмма лечения</MudText>
                        break;
                    case "Кипер":
                        <MudText Class="labelText">Диаграмма питания</MudText>
                        break;
                    case "Кладовщик":
                        <MudText Class="labelText">Диаграмма материалов</MudText>
                        break;
                    case "Строитель-ремонтник":
                        <MudText Class="labelText">Диаграмма ремонтых работы</MudText>
                        break;
                    case "Уборщик":
                        <MudText Class="labelText">Диаграмма уборки</MudText>
                        break;
                    case "Билетный кассир":
                        <MudText Class="labelText">Диаграмма продаж</MudText>
                        break;
                    case "Кассир кафе":
                        <MudText Class="labelText">Диаграмма продаж</MudText>
                        break;
                }
                <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Bottom" Width="270px" Height="270px"
                          InputData="@data" InputLabels="@labels"></MudChart>
            </div>
        </div>
        <div style="margin-left: 50px; margin-right: 50px;">
            @if (currentRole.Title == "Ветеринар" || currentRole.Title == "Кипер"
            || currentRole.Title == "Строитель-ремонтник" || currentRole.Title == "Уборщик")
            {
                <MudText Class="labelText">Отчетная таблица:</MudText>
                <MudTable Items="@aviariesList" Hover="true" Style="border: solid 1px #5FCEAD; border-radius: 5px; ">
                    <HeaderContent>
                        <MudTh>Номер вольера</MudTh>
                        <MudTh>Название вольера</MudTh>
                        <MudTh>Вид вольера</MudTh>
                        <MudTh>Вид животных</MudTh>
                        <MudTh>Количество животных</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title" Style="font-size: 20px;">@context.Id</MudTd>
                        <MudTd DataLabel="Title" Style="font-size: 20px;">@context.Title</MudTd>
                        <MudTd DataLabel="Title" Style="font-size: 20px;">@GetType(context)</MudTd>
                        <MudTd DataLabel="Title" Style="font-size: 20px;">@GetKind(context)</MudTd>
                        <MudTd DataLabel="Title" Style="font-size: 20px;">@GetCount(context)</MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else if (currentRole.Title == "Билетный кассир" || currentRole.Title == "Кассир кафе")
            {

            }
            else if (currentRole.Title == "Кладовщик")
            {

            }
        </div>
        <MudText style="font-size: 20px; margin-left: 50px; margin-top: 10px;">@currentReport.Description</MudText>
        <MudButton Style="font-size: 16px; border: 3px solid #21A77F; color: #21A77F; border-radius: 10px; margin-left: 50px; margin-bottom: 10px;" Variant="Variant.Outlined" OnClick="GetDoc">Скачать PDF-файл</MudButton>
    </div>
</MudPaper>


@code {
    [Parameter]
    public string? currentReportId { get; set; }

    private List<Aviary> aviariesList = new List<Aviary>();
    private List<Animal> animalsList = new List<Animal>();
    private List<MaterialApplication> materialApplications = new List<MaterialApplication>();
    private List<CareMaterial> materials = new List<CareMaterial>();

    public List<int> dataList = new List<int>();
    public List<string> labelsList = new List<string>();

    private Report currentReport = new Report();
    private User currentUser = new User();
    private Aviary currentAviary = new Aviary();
    private Role currentRole = new Role();

    public string[] labels = new string[] { };
    public double[] data = new double[] { };

    private void GetDoc()
    {
        Aviary aviary = new Aviary();
        aviary.GeneratePDF(Context, iJSRuntime, aviariesList, data, labels, currentRole, currentUser, currentReport);
    }

    protected override async Task OnInitializedAsync()
    {
        currentReport = Context.Reports.FirstOrDefault(x => x.Id == int.Parse(currentReportId));
        currentUser = Context.Users.FirstOrDefault(x => x.Id == currentReport.UserId);
        currentAviary = Context.Aviaries.FirstOrDefault(x => x.Id == currentReport.AviaryId);
        currentRole = Context.Roles.FirstOrDefault(x => x.Id == currentUser.RoleId);

        aviariesList = Context.Aviaries.Where(x => x.Id == currentReport.AviaryId).ToList();
        animalsList = Context.Animals.Where(x => x.AviaryId == currentAviary.Id && x.IsDeleted == false).ToList();

        switch (currentRole.Title)
        {
            case "Ветеринар":
                foreach (Animal item in animalsList)
                {
                    materialApplications = Context.MaterialApplications.Where(x => x.Date == currentReport.Date && x.AnimalId == item.Id &&
                        (x.MaterialId == 8 || x.MaterialId == 9 || x.MaterialId == 10)).ToList();
                    dataList.Add(materialApplications.Count);
                    labelsList.Add(item.Name);
                }
                break;
            case "Кипер":
                foreach (Animal item in animalsList)
                {
                    materialApplications = Context.MaterialApplications.Where(x => x.Date == currentReport.Date && x.AnimalId == item.Id &&
                        (x.MaterialId == 1 || x.MaterialId == 2 || x.MaterialId == 3 || x.MaterialId == 4 ||
                            x.MaterialId == 5 || x.MaterialId == 6 || x.MaterialId == 7)).ToList();
                    dataList.Add(materialApplications.Count);
                    labelsList.Add(item.Name);
                }
                break;
            case "Уборщик":
                foreach (Animal item in animalsList)
                {
                    materialApplications = Context.MaterialApplications.Where(x => x.Date == currentReport.Date && x.AnimalId == item.Id &&
                        (x.MaterialId == 11 || x.MaterialId == 12 || x.MaterialId == 13)).ToList();
                    dataList.Add(materialApplications.Count);
                    labelsList.Add(item.Name);
                }
                break;
        }

        data = dataList.ToArray().Select(Convert.ToDouble).ToArray();
        labels = labelsList.ToArray();
    }

    private string GetType(Aviary context) => Context.TypeAviaries.FirstOrDefault(x => x.Id == context.TypeId).Title;

    private string GetKind(Aviary context) => Context.AnimalKinds.FirstOrDefault(x => x.Id == context.KindId).Title;

    private string GetCount(Aviary context) => Context.Animals.Where(x => x.AviaryId == currentAviary.Id && x.IsDeleted == false).ToList().Count.ToString();

    private async Task GetAccept()
    {
        var result = await DialogService.Show<AcceptDialog>($"Вы уверены, что хотите принять этот отчет?").Result;

        if (!result.Canceled)
        {
            currentReport.IsAccepted = true;
            Context.Reports.Update(currentReport);
            Context.SaveChanges();
            Snackbar.Add("Отчет принят!", Severity.Success, config => { config.ShowCloseIcon = false; });
            Navigation.NavigateTo($"/report_list");
        }
    }
}

